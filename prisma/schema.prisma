// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  company       String?
  role          UserRole   @default(ATTENDEE)
  createdAt     DateTime   @default(now()) @map(name: "created_at")
  updatedAt     DateTime   @default(now()) @map(name: "updated_at")
  categories    Category[]
  events        Event[]
  accounts      Account[]
  sessions      Session[]
}

model Category {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  name   String
  image  String
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  events    Event[]
}

model Event {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  categoryIds     String[] @db.ObjectId
  maxParticipants String
  eventType       String
  ticketType      String
  image           String   @default("/placeholder.svg")
  country         String
  state           String
  address_one     String
  address_two     String
  link            String?
  ticketPrice     String?
  email           String
  contact         String
  content         String
  tags            Tag[]
  dateRange       DateTime
  location        String
  category        Category @relation(fields: [categoryIds], references: [id], onDelete: Cascade)
  createdAt       DateTime @default(now()) @map(name: "created_at")
  updatedAt       DateTime @default(now()) @map(name: "updated_at")
  User            User?    @relation(fields: [userId], references: [id])
  userId          String?  @db.ObjectId
}

model Tag {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  text    String
  Event   Event?  @relation(fields: [eventId], references: [id])
  eventId String? @db.ObjectId
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

enum UserRole {
  ADMIN
  ATTENDEE
  ORGANIZER
}
